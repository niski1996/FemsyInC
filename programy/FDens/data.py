import numpy as np


class DataSet():

    def __init__(self):
        self.__nodes = None
        self.__elements = None

    @property
    def nodes(self):
        return self.__nodes

    @property
    def elements(self):
        return self.__elements

    def node_set(self, nodes):
        """set up matrix of nodes coords in meters

        First schould be None value, then numerical values
        :param
        nodes : array_like
            two level list containg coordinates for bonduary and None for unknown coords
            [[x1_coord,y1_coord,z1_coord],...,None...]
        IMPORTANT
            numbers begin from 0"""
        nodes.reverse()
        nval = nodes.index(None)
        for num in range(nval + 2, len(nodes)):
            try:
                if nodes[num] is not None:
                    raise ValueError("elementy listy nie są posortowane")
            except IndexError:
                pass
        nodes.reverse()
        self.__nodes = nodes

    def elem_set(self, elems):
        """"set up matrix of elements in meters
        :param
        elems : array_like
            two level list. Evry row corresponds to one element. First value in second level in tension
             coefficient equal F/L where F - tension forne, L - lenght of element. Rest is numbers of nodes which
             are included in element. Allows only 2 nodes elements
             [[q1,n1,n2],[q2,n4,n1]...]"""
        for el in elems:
            if len(el) != 3:
                raise ValueError("podana lista ma nieprawidłowy wymiar. Powinno być nx3")
        self.__elements = elems


def create_five_point():
    fp = DataSet()
    fp.node_set([None,
                 [1, 1, 2],
                 [1, 4, 4],
                 [4, 4, 3],
                 [4, 1, 3]])
    fp.elem_set([[1, 0, 1],
                 [1, 0, 2],
                 [1, 0, 3],
                 [1, 0, 4]])
    return fp


def create_16_point():  # TODO w main short algorytm będzie nadpisywał punkt 0 WAŻNE
    fp = DataSet()
    fp.node_set([None, None, None, None,
                 None, None, None, None,
                 None, None, None, None,
                 [0.00001, 0, 0],
                 [0, 3, 2],
                 [3, 0, 2],
                 [3, 3, 0]])
    fp.elem_set([[1, 12, 0],
                 [1, 0, 1],
                 [1, 1, 13],
                 [1, 12, 2],
                 [1, 0, 3],
                 [1, 1, 4],
                 [1, 13, 5],
                 [1, 2, 3],
                 [1, 3, 4],
                 [1, 4, 5],
                 [1, 2, 6],
                 [1, 3, 7],
                 [1, 4, 8],
                 [1, 5, 9],
                 [1, 6, 7],
                 [1, 7, 8],
                 [1, 8, 9],
                 [1, 6, 14],
                 [1, 7, 10],
                 [1, 8, 11],
                 [1, 9, 15],
                 [1, 14, 10],
                 [1, 10, 11],
                 [1, 11, 15]
                 ])
    return fp


def array_of_calculeted():
    arr = np.array((419.96701, 249.41456, 65.19260,
                    416.71879, 280.15949, 56.18863,
                    378.05357, 331.50592, 63.87463,
                    388.60998, 295.10121, 81.16306,
                    395.01696, 256.28170, 94.58750,
                    395.07032, 194.84182, 94.68160,
                    388.73440, 156.07853, 81.38246,
                    378.23926, 119.71102, 64.20208,
                    342.07403, 111.11718, 87.80328,
                    332.04913, 76.56526, 64.77147,
                    296.18717, 67.21384, 82.99670,
                    301.98445, 104.49528, 113.05735,
                    309.78350, 144.57213, 132.96415,
                    321.54505, 186.53826, 143.26726,
                    361.95092, 190.13919, 121.32859,
                    350.38786, 151.35938, 111.82464,
                    376.60151, 225.78685, 116.54925,
                    339.36639, 226.23030, 140.26635,
                    321.22524, 266.40125, 142.70329,
                    361.81295, 261.78021, 121.08529,
                    350.05763, 300.87993, 111.24231,
                    309.04382, 308.94257, 131.65981,
                    300.92002, 349.95461, 111.18032,
                    341.60023, 341.54845, 86.96777,
                    295.11132, 388.53537, 81.09955,
                    331.52631, 378.00769, 63.84953,
                    281.03891, 38.20522, 57.69399,
                    250.77910, 33.56808, 67.54739,
                    226.41499, 20.65665, 49.97783,
                    225.47166, 6.88555, 29.99261,
                    204.02583, 34.75194, 70.18771,
                    174.99781, 41.15414, 64.27085,
                    170.46021, 77.80416, 106.61592,
                    200.50300, 63.21458, 104.55062,
                    228.21334, 48.73433, 92.13927,
                    280.15914, 416.67240, 56.14260,
                    249.40845, 419.90993, 65.13037,
                    225.17649, 431.66743, 47.79385,
                    201.16097, 419.91237, 65.13582,
                    170.39490, 416.67754, 56.15406,
                    119.61382, 378.03080, 63.90107,
                    76.26709, 331.56074, 63.99688,
                    37.64065, 280.22642, 56.33790,
                    32.65343, 249.50312, 65.39011,
                    19.80248, 225.25071, 47.99012,
                    6.60083, 225.08357, 29.33004,
                    32.72421, 201.30852, 65.51493,
                    37.79378, 170.57676, 56.60793,
                    77.10935, 120.28496, 65.48212,
                    113.30115, 112.72463, 91.38832,
                    124.09494, 79.71809, 71.80311,
                    67.05631, 156.46919, 82.25374,
                    105.18927, 152.23099, 113.76855,
                    93.05711, 190.61638, 122.39284,
                    59.18837, 195.10608, 95.27097,
                    46.83641, 225.60906, 87.70563,
                    77.66241, 226.05655, 117.15075,
                    92.57041, 261.98166, 121.53459,
                    58.98759, 256.42940, 94.91691,
                    66.56223, 295.19958, 81.38246,
                    103.90763, 300.99928, 111.5084,
                    110.86561, 341.60482, 87.09347,
                    151.19276, 349.99762, 111.27626,
                    156.01073, 388.55154, 81.13561,
                    144.21235, 309.04046, 131.87813,
                    186.39400, 321.07859, 142.66584,
                    226.20068, 339.09716, 139.97205,
                    266.45186, 321.03273, 142.56356,
                    274.00798, 273.83845, 155.30159,
                    226.75213, 292.70272, 156.32583,
                    179.94604, 273.95402, 155.55934,
                    132.96807, 266.60844, 143.16539,
                    194.80280, 394.92377, 94.49885,
                    225.43068, 406.29312, 87.23231,
                    256.27593, 394.91670, 94.48308,
                    261.78654, 361.66085, 120.94174,
                    225.75945, 376.42852, 116.35191,
                    190.06007, 361.67953, 120.98342,
                    293.06264, 226.73603, 156.66442,
                    227.51219, 227.21540, 161.89262,
                    161.83747, 227.07851, 157.42824,
                    115.33454, 226.59671, 141.08355,
                    133.91177, 187.23873, 144.82950,
                    181.35224, 180.85775, 158.03904,
                    228.42005, 162.36318, 159.26705,
                    274.71900, 180.19252, 156.55541,
                    267.99059, 133.73015, 145.27696,
                    229.21428, 116.98466, 145.28626,
                    189.73197, 135.19861, 148.55203,
                    146.69996, 146.05206, 136.26479,
                    156.71336, 108.06165, 121.01132,
                    195.99195, 96.87237, 131.44373)
                   ).reshape(92, 3)

    return arr


def arr_of_const():
    arr11 = [[70, 70, 0], [380, 380, 0], [70, 380, 0],
             [380, 70, 0], [30, 110, 0], [110, 30, 0],
             [30, 340, 0], [110, 430, 0], [0, 190, 0],
             [260, 0, 0], [190, 0, 0], [0, 260, 0],
             [190, 450, 0], [260, 450, 0], [450, 190, 0],
             [450, 260, 0], [430, 110, 0], [340, 30, 0],
             [340, 430, 0], [430, 340, 0]]
    return arr11
